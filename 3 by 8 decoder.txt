
//design code for 3 by 8 decoder using data flow style of scalar version
module decoder(i0,i1,i2,i3,i4,i5,i6,i7,a,b,c);
   input wire a,b,c;
  output wire i0,i1,i2,i3,i4,i5,i6,i7;
 
  assign i0 = ~a&~b&~c;
  assign i1 = ~a&~b&c;
  assign i2 = ~a&b&~c;
  assign i3 = ~a&b&c;
  assign i4 = a&~b&~c;
  assign i5 = a&~b&c;
  assign i6 = a&b&~c;
  assign i7 = a&b&c;
endmodule
//test bench code for 3 by 8 decoder using manual inputs of scalar version
module decoder_tb;
  reg a,b,c;// input declaration
  wire i0,i1,i2,i3,i4,i5,i6,i7; //// output declaration
  //order based instantiation as per design module
  decoder dut(i0,i1,i2,i3,i4,i5,i6,i7,a,b,c);
  //decoder dut(.i0(i0),.i1(i1),.i2(i2),.i3(i3),.i4(i4),.i5(i5),.i6(i6),.i7(i7),.a(a),.b(b),.c(c));
  
  initial begin
    $monitor("values of a = %0d b = %0d c = %0d i0 = %0d i1 = %0d i2 = %0d i3 = %0d i4 = %0d i5 = %0d i6 = %0d i7 = %0d",a,b,c,i0,i1,i2,i3,i4,i5,i6,i7);
   
     a=0; b=0; c=0;
    #1;
     a=0; b=0; c=1;
    #1;
     a=0; b=1; c=0;
    #1;
     a=0; b=1; c=1;
    #1;
     a=1; b=0; c=0;
    #1;
     a=1; b=0; c=1;
    #1;
     a=1; b=1; c=0;
    #1;
    a=1; b=1; c=1;
    #1;
    $stop;
  end
    
    
endmodule
 
    
